{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nvar $a5fd07fa01589658$exports = {};\n'use strict';\nclass $a5fd07fa01589658$var$Game {\n    movedCells = [];\n    #NUMBER_OF_ROWS_CELLS = 4;\n    initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    constructor(initialState){\n        this.initialState = initialState || Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n        this.gameState = JSON.parse(JSON.stringify(this.initialState));\n        this.gameNewState = JSON.parse(JSON.stringify(this.gameState));\n        this.gameStatus = 'idle';\n        this.gameScore = 0;\n    }\n    moveLeft() {\n        if (this.gameStatus !== 'playing') return;\n        this.resetMovedCells();\n        this.gameNewState = JSON.parse(JSON.stringify(this.gameState));\n        const mergeLeft = (i, j, k)=>{\n            if (this.gameNewState[i][k] !== 0) {\n                for (const movedCell of this.movedCells){\n                    if (movedCell.y === i && movedCell.x === j) {\n                        movedCell.newX = j;\n                        movedCell.changed = true;\n                    }\n                    if (movedCell.y === i && movedCell.x === k) {\n                        movedCell.newX = j;\n                        movedCell.changed = true;\n                    }\n                }\n                this.gameNewState[i][j] *= 2;\n                this.gameScore += this.gameNewState[i][j];\n                this.gameNewState[i][k] = 0;\n            }\n        };\n        for(let i = 0; i < this.#NUMBER_OF_ROWS_CELLS; i++)for(let j = 0; j < this.#NUMBER_OF_ROWS_CELLS - 1; j++){\n            if (this.gameNewState[i][j] === this.gameNewState[i][j + 1]) mergeLeft(i, j, j + 1);\n            else if (j < this.#NUMBER_OF_ROWS_CELLS - 2 && this.gameNewState[i][j] === this.gameNewState[i][j + 2] && this.gameNewState[i][j + 1] === 0) mergeLeft(i, j, j + 2);\n            else if (j < this.#NUMBER_OF_ROWS_CELLS - 3 && this.gameNewState[i][j] === this.gameNewState[i][j + 3] && this.gameNewState[i][j + 1] === 0 && this.gameNewState[i][j + 2] === 0) mergeLeft(i, j, j + 3);\n        }\n        for(let num = 1; num <= this.#NUMBER_OF_ROWS_CELLS - 1; num++)for(let i = 0; i < this.#NUMBER_OF_ROWS_CELLS; i++){\n            for(let j = 0; j < this.#NUMBER_OF_ROWS_CELLS - 1; j++)if (this.gameNewState[i][j] === 0 && this.gameNewState[i][j + 1] !== 0) {\n                for (const movedCell of this.movedCells){\n                    if (movedCell.changed && movedCell.y === i && movedCell.newX === j + 1) movedCell.newX = j;\n                    if (!movedCell.changed && movedCell.y === i && movedCell.x === j + 1) {\n                        movedCell.newX = j;\n                        movedCell.changed = true;\n                    }\n                }\n                this.gameNewState[i][j] = this.gameNewState[i][j + 1];\n                this.gameNewState[i][j + 1] = 0;\n            }\n        }\n        this.checkChanges();\n        this.checkStatus();\n    }\n    moveRight() {\n        if (this.gameStatus !== 'playing') return;\n        this.resetMovedCells();\n        this.gameNewState = JSON.parse(JSON.stringify(this.gameState));\n        const mergeRight = (i, j, k)=>{\n            if (this.gameNewState[i][k] !== 0) {\n                for (const movedCell of this.movedCells){\n                    if (movedCell.y === i && movedCell.x === j) {\n                        movedCell.newX = j;\n                        movedCell.changed = true;\n                    }\n                    if (movedCell.y === i && movedCell.x === k) {\n                        movedCell.newX = j;\n                        movedCell.changed = true;\n                    }\n                }\n                this.gameNewState[i][j] *= 2;\n                this.gameScore += this.gameNewState[i][j];\n                this.gameNewState[i][k] = 0;\n            }\n        };\n        for(let i = this.#NUMBER_OF_ROWS_CELLS - 1; i >= 0; i--)for(let j = this.#NUMBER_OF_ROWS_CELLS - 1; j > 0; j--){\n            if (this.gameNewState[i][j] === this.gameNewState[i][j - 1]) mergeRight(i, j, j - 1);\n            else if (j > 1 && this.gameNewState[i][j] === this.gameNewState[i][j - 2] && this.gameNewState[i][j - 1] === 0) mergeRight(i, j, j - 2);\n            else if (j > 2 && this.gameNewState[i][j] === this.gameNewState[i][j - 3] && this.gameNewState[i][j - 1] === 0 && this.gameNewState[i][j - 2] === 0) mergeRight(i, j, j - 3);\n        }\n        for(let num = 1; num <= this.#NUMBER_OF_ROWS_CELLS - 1; num++)for(let i = this.#NUMBER_OF_ROWS_CELLS - 1; i >= 0; i--){\n            for(let j = this.#NUMBER_OF_ROWS_CELLS - 1; j > 0; j--)if (this.gameNewState[i][j] === 0 && this.gameNewState[i][j - 1] !== 0) {\n                for (const movedCell of this.movedCells){\n                    if (movedCell.changed && movedCell.y === i && movedCell.newX === j - 1) movedCell.newX = j;\n                    if (!movedCell.changed && movedCell.y === i && movedCell.x === j - 1) {\n                        movedCell.newX = j;\n                        movedCell.changed = true;\n                    }\n                }\n                this.gameNewState[i][j] = this.gameNewState[i][j - 1];\n                this.gameNewState[i][j - 1] = 0;\n            }\n        }\n        this.checkChanges();\n        this.checkStatus();\n    }\n    moveUp() {\n        if (this.gameStatus !== 'playing') return;\n        this.resetMovedCells();\n        this.gameNewState = JSON.parse(JSON.stringify(this.gameState));\n        const mergeUp = (i, j, k)=>{\n            if (this.gameNewState[k][j] !== 0) {\n                for (const movedCell of this.movedCells){\n                    if (movedCell.x === j && movedCell.y === i) {\n                        movedCell.newY = i;\n                        movedCell.changed = true;\n                    }\n                    if (movedCell.x === j && movedCell.y === k) {\n                        movedCell.newY = i;\n                        movedCell.changed = true;\n                    }\n                }\n                this.gameNewState[i][j] *= 2;\n                this.gameScore += this.gameNewState[i][j];\n                this.gameNewState[k][j] = 0;\n            }\n        };\n        for(let j = 0; j < this.#NUMBER_OF_ROWS_CELLS; j++)for(let i = 0; i < this.#NUMBER_OF_ROWS_CELLS - 1; i++){\n            if (this.gameNewState[i][j] === this.gameNewState[i + 1][j]) mergeUp(i, j, i + 1);\n            else if (i < this.#NUMBER_OF_ROWS_CELLS - 2 && this.gameNewState[i][j] === this.gameNewState[i + 2][j] && this.gameNewState[i + 1][j] === 0) mergeUp(i, j, i + 2);\n            else if (i < this.#NUMBER_OF_ROWS_CELLS - 3 && this.gameNewState[i][j] === this.gameNewState[i + 3][j] && this.gameNewState[i + 1][j] === 0 && this.gameNewState[i + 2][j] === 0) mergeUp(i, j, i + 3);\n        }\n        for(let num = 1; num <= this.#NUMBER_OF_ROWS_CELLS - 1; num++)for(let j = 0; j < this.#NUMBER_OF_ROWS_CELLS; j++){\n            for(let i = 0; i < this.#NUMBER_OF_ROWS_CELLS - 1; i++)if (this.gameNewState[i][j] === 0 && this.gameNewState[i + 1][j] !== 0) {\n                for (const movedCell of this.movedCells){\n                    if (movedCell.changed && movedCell.newY === i + 1 && movedCell.x === j) movedCell.newY = i;\n                    if (!movedCell.changed && movedCell.y === i + 1 && movedCell.x === j) {\n                        movedCell.newY = i;\n                        movedCell.changed = true;\n                    }\n                }\n                this.gameNewState[i][j] = this.gameNewState[i + 1][j];\n                this.gameNewState[i + 1][j] = 0;\n            }\n        }\n        this.checkChanges();\n        this.checkStatus();\n    }\n    moveDown() {\n        if (this.gameStatus !== 'playing') return;\n        this.resetMovedCells();\n        this.gameNewState = JSON.parse(JSON.stringify(this.gameState));\n        const mergeDown = (i, j, k)=>{\n            if (this.gameNewState[k][j] !== 0) {\n                for (const movedCell of this.movedCells){\n                    if (movedCell.x === j && movedCell.y === i) {\n                        movedCell.newY = i;\n                        movedCell.changed = true;\n                    }\n                    if (movedCell.x === j && movedCell.y === k) {\n                        movedCell.newY = i;\n                        movedCell.changed = true;\n                    }\n                }\n                this.gameNewState[i][j] *= 2;\n                this.gameScore += this.gameNewState[i][j];\n                this.gameNewState[k][j] = 0;\n            }\n        };\n        for(let j = this.#NUMBER_OF_ROWS_CELLS - 1; j >= 0; j--)for(let i = this.#NUMBER_OF_ROWS_CELLS - 1; i > 0; i--){\n            if (this.gameNewState[i][j] === this.gameNewState[i - 1][j]) mergeDown(i, j, i - 1);\n            else if (i > 1 && this.gameNewState[i][j] === this.gameNewState[i - 2][j] && this.gameNewState[i - 1][j] === 0) mergeDown(i, j, i - 2);\n            else if (i > 2 && this.gameNewState[i][j] === this.gameNewState[i - 3][j] && this.gameNewState[i - 1][j] === 0 && this.gameNewState[i - 2][j] === 0) mergeDown(i, j, i - 3);\n        }\n        for(let num = 1; num <= this.#NUMBER_OF_ROWS_CELLS - 1; num++)for(let j = this.#NUMBER_OF_ROWS_CELLS - 1; j >= 0; j--){\n            for(let i = this.#NUMBER_OF_ROWS_CELLS - 1; i > 0; i--)if (this.gameNewState[i][j] === 0 && this.gameNewState[i - 1][j] !== 0) {\n                for (const movedCell of this.movedCells){\n                    if (movedCell.changed && movedCell.newY === i - 1 && movedCell.x === j) movedCell.newY = i;\n                    if (!movedCell.changed && movedCell.y === i - 1 && movedCell.x === j) {\n                        movedCell.newY = i;\n                        movedCell.changed = true;\n                    }\n                }\n                this.gameNewState[i][j] = this.gameNewState[i - 1][j];\n                this.gameNewState[i - 1][j] = 0;\n            }\n        }\n        this.checkChanges();\n        this.checkStatus();\n    }\n    checkChanges() {\n        const isChanged = this.movedCells.some((movedCell)=>{\n            return movedCell.changed;\n        });\n        if (!isChanged) return;\n        this.gameState = JSON.parse(JSON.stringify(this.gameNewState));\n        this.gameNewState = JSON.parse(JSON.stringify(this.gameState));\n        this.spawnNumber();\n    }\n    getScore() {\n        return this.gameScore;\n    }\n    getState() {\n        return this.gameState;\n    }\n    resetMovedCells() {\n        this.movedCells = [];\n        for(let i = 0; i < this.#NUMBER_OF_ROWS_CELLS; i++){\n            for(let j = 0; j < this.#NUMBER_OF_ROWS_CELLS; j++)if (this.gameState[i][j] !== 0) this.movedCells.push({\n                x: j,\n                y: i,\n                changed: false\n            });\n        }\n    }\n    getMovedCells() {\n        return this.movedCells;\n    }\n    getStatus() {\n        return this.gameStatus;\n    }\n    start() {\n        if (this.gameStatus === 'idle') {\n            this.gameStatus = 'playing';\n            this.gameScore = 0;\n            this.spawnNumber();\n            this.spawnNumber();\n        }\n    }\n    restart() {\n        this.gameState = JSON.parse(JSON.stringify(this.initialState));\n        this.gameStatus = 'idle';\n        this.gameScore = 0;\n    }\n    spawnNumber() {\n        const freeCell = [];\n        for(let i = 0; i < this.#NUMBER_OF_ROWS_CELLS; i++){\n            for(let j = 0; j < this.#NUMBER_OF_ROWS_CELLS; j++)if (this.gameState[i][j] === 0) freeCell.push({\n                x: i,\n                y: j\n            });\n        }\n        if (freeCell.length === 0) return;\n        const randomIndex = Math.floor(Math.random() * freeCell.length);\n        const PROBABILITY_FOR_FOUR = 10;\n        const randomNumber = Math.random() * 100 + 1 <= PROBABILITY_FOR_FOUR ? 4 : 2;\n        this.gameState[freeCell[randomIndex].x][freeCell[randomIndex].y] = randomNumber;\n    }\n    checkStatus() {\n        if (this.gameState.some((row)=>row.includes(2048))) this.gameStatus = 'win';\n        else if (!this.canMove()) this.gameStatus = 'lose';\n    }\n    canMove() {\n        if (this.gameState.some((row)=>row.includes(0))) return true;\n        for(let i = 0; i < this.#NUMBER_OF_ROWS_CELLS - 1; i++)for(let j = 0; j < this.#NUMBER_OF_ROWS_CELLS; j++){\n            if (this.gameState[i][j] === this.gameState[i + 1][j]) return true;\n        }\n        for(let i = 0; i < this.#NUMBER_OF_ROWS_CELLS; i++)for(let j = 0; j < this.#NUMBER_OF_ROWS_CELLS - 1; j++){\n            if (this.gameState[i][j] === this.gameState[i][j + 1]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$tbody = document.querySelector('tbody');\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector('.button');\nconst $09e991522ca7e64e$var$ANIMATION_DURATION = 200;\nconst $09e991522ca7e64e$var$ANIMATION_OPTIONS = {\n    duration: $09e991522ca7e64e$var$ANIMATION_DURATION,\n    fill: 'forwards',\n    easing: 'ease'\n};\nlet $09e991522ca7e64e$var$isStarted = false;\nfunction $09e991522ca7e64e$var$generatePlayingTilesContainer(isCreate) {\n    if (isCreate) {\n        const playingTiles = document.createElement('div');\n        playingTiles.classList.add('generated-field');\n        document.querySelector('.container').prepend(playingTiles);\n        return;\n    }\n    document.querySelector('.game-score').textContent = $09e991522ca7e64e$var$game.getScore();\n    document.querySelector('.generated-field').remove();\n}\n$09e991522ca7e64e$var$buttonStart.addEventListener('click', ()=>{\n    if ($09e991522ca7e64e$var$buttonStart.classList.contains('start')) {\n        $09e991522ca7e64e$var$isStarted = true;\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$generatePlayingTilesContainer(true);\n        $09e991522ca7e64e$var$updateField();\n        document.querySelector('.message-start').classList.add('hidden');\n        $09e991522ca7e64e$var$buttonStart.classList.remove('start');\n        $09e991522ca7e64e$var$buttonStart.classList.add('restart');\n        $09e991522ca7e64e$var$buttonStart.textContent = 'Restart';\n        return;\n    }\n    if ($09e991522ca7e64e$var$buttonStart.classList.contains('restart')) {\n        $09e991522ca7e64e$var$isStarted = false;\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$generatePlayingTilesContainer(false);\n        document.querySelector('.message-start').classList.remove('hidden');\n        $09e991522ca7e64e$var$buttonStart.classList.remove('restart');\n        $09e991522ca7e64e$var$buttonStart.classList.add('start');\n        $09e991522ca7e64e$var$buttonStart.textContent = 'Start';\n        if (!document.querySelector('.message-win').classList.contains('hidden')) document.querySelector('.message-win').classList.add('hidden');\n        if (!document.querySelector('.message-lose').classList.contains('hidden')) document.querySelector('.message-lose').classList.add('hidden');\n    }\n    $09e991522ca7e64e$var$buttonStart.blur();\n});\ndocument.addEventListener('keydown', (e)=>{\n    if (!$09e991522ca7e64e$var$isStarted) return;\n    if (e.key === 'ArrowLeft') $09e991522ca7e64e$var$game.moveLeft();\n    if (e.key === 'ArrowRight') $09e991522ca7e64e$var$game.moveRight();\n    if (e.key === 'ArrowUp') $09e991522ca7e64e$var$game.moveUp();\n    if (e.key === 'ArrowDown') $09e991522ca7e64e$var$game.moveDown();\n    const moveResult = $09e991522ca7e64e$var$moveAnimation(e.key);\n    if (moveResult) setTimeout(()=>{\n        $09e991522ca7e64e$var$updateField();\n    }, $09e991522ca7e64e$var$ANIMATION_DURATION);\n    else $09e991522ca7e64e$var$updateField();\n    if ($09e991522ca7e64e$var$game.getStatus() === 'win') {\n        document.querySelector('.message-win').classList.remove('hidden');\n        $09e991522ca7e64e$var$isStarted = false;\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === 'lose') {\n        document.querySelector('.message-lose').classList.remove('hidden');\n        $09e991522ca7e64e$var$isStarted = false;\n    }\n});\nfunction $09e991522ca7e64e$var$updateField() {\n    if (document.querySelector('.generated-field') !== null) document.querySelector('.generated-field').innerHTML = '';\n    const newTop = document.createDocumentFragment();\n    const score = $09e991522ca7e64e$var$game.getScore();\n    const state = $09e991522ca7e64e$var$game.getState();\n    for(let i = 0; i < 4; i++){\n        for(let j = 0; j < 4; j++)if (state[i][j] !== 0) {\n            const cellRect = $09e991522ca7e64e$var$tbody.rows[i].cells[j].getBoundingClientRect();\n            newTop.append(document.createElement('div'));\n            newTop.lastElementChild.classList.add('generated-cell', `generated-cell--${state[i][j]}`);\n            newTop.lastElementChild.dataset.x = j;\n            newTop.lastElementChild.dataset.y = i;\n            newTop.lastElementChild.textContent = state[i][j];\n            newTop.lastElementChild.style.left = cellRect.left + 'px';\n            newTop.lastElementChild.style.top = cellRect.top + 'px';\n            newTop.lastElementChild.animate({\n                transform: [\n                    'scale(1)',\n                    'scale(1.03)',\n                    'scale(1)'\n                ]\n            }, $09e991522ca7e64e$var$ANIMATION_OPTIONS);\n        }\n    }\n    if (document.querySelector('.generated-field') !== null) document.querySelector('.generated-field').append(newTop);\n    document.querySelector('.game-score').textContent = score;\n}\nfunction $09e991522ca7e64e$var$moveAnimation(arrow) {\n    const generatedField = document.querySelector('.generated-field');\n    const movedCells = $09e991522ca7e64e$var$game.getMovedCells();\n    const isChanged = movedCells.some((movedCell)=>{\n        return movedCell.changed;\n    });\n    if (!isChanged) return false;\n    for (const generatedCell of generatedField.children)if (generatedCell.getAnimations().length > 0) generatedCell.getAnimations()[0].cancel();\n    switch(arrow){\n        case 'ArrowLeft':\n            for (const generatedCell of generatedField.children){\n                const generatedCellRect = generatedCell.getBoundingClientRect();\n                let x = 0;\n                for (const movedCell of movedCells)if (movedCell.changed && movedCell.x === Number(generatedCell.dataset.x) && movedCell.y === Number(generatedCell.dataset.y)) {\n                    const cellRect = $09e991522ca7e64e$var$tbody.rows[movedCell.y].cells[movedCell.newX].getBoundingClientRect();\n                    x = generatedCellRect.left - cellRect.left;\n                }\n                generatedCell.animate({\n                    transform: [\n                        'translateX(0)',\n                        `translateX(${-x}px)`\n                    ]\n                }, $09e991522ca7e64e$var$ANIMATION_OPTIONS);\n            }\n            break;\n        case 'ArrowRight':\n            for (const generatedCell of generatedField.children){\n                const generatedCellRect = generatedCell.getBoundingClientRect();\n                let x = 0;\n                for (const movedCell of movedCells)if (movedCell.changed && movedCell.x === Number(generatedCell.dataset.x) && movedCell.y === Number(generatedCell.dataset.y)) {\n                    const cellRect = $09e991522ca7e64e$var$tbody.rows[movedCell.y].cells[movedCell.newX].getBoundingClientRect();\n                    x = cellRect.left - generatedCellRect.left;\n                }\n                generatedCell.animate({\n                    transform: [\n                        'translateX(0)',\n                        `translateX(${x}px)`\n                    ]\n                }, $09e991522ca7e64e$var$ANIMATION_OPTIONS);\n            }\n            break;\n        case 'ArrowUp':\n            for (const generatedCell of generatedField.children){\n                const generatedCellRect = generatedCell.getBoundingClientRect();\n                let y = 0;\n                for (const movedCell of movedCells)if (movedCell.changed && movedCell.x === Number(generatedCell.dataset.x) && movedCell.y === Number(generatedCell.dataset.y)) {\n                    const cellRect = $09e991522ca7e64e$var$tbody.rows[movedCell.newY].cells[movedCell.x].getBoundingClientRect();\n                    y = generatedCellRect.top - cellRect.top;\n                }\n                generatedCell.animate({\n                    transform: [\n                        'translateY(0)',\n                        `translateY(${-y}px)`\n                    ]\n                }, $09e991522ca7e64e$var$ANIMATION_OPTIONS);\n            }\n            break;\n        case 'ArrowDown':\n            for (const generatedCell of generatedField.children){\n                const generatedCellRect = generatedCell.getBoundingClientRect();\n                let y = 0;\n                for (const movedCell of movedCells)if (movedCell.changed && movedCell.x === Number(generatedCell.dataset.x) && movedCell.y === Number(generatedCell.dataset.y)) {\n                    const cellRect = $09e991522ca7e64e$var$tbody.rows[movedCell.newY].cells[movedCell.x].getBoundingClientRect();\n                    y = cellRect.top - generatedCellRect.top;\n                }\n                generatedCell.animate({\n                    transform: [\n                        'translateY(0)',\n                        `translateY(${y}px)`\n                    ]\n                }, $09e991522ca7e64e$var$ANIMATION_OPTIONS);\n            }\n            break;\n    }\n    return true;\n}\n\n\n//# sourceMappingURL=index.cbddf41c.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst tbody = document.querySelector('tbody');\nconst buttonStart = document.querySelector('.button');\nconst ANIMATION_DURATION = 200;\nconst ANIMATION_OPTIONS = {\n  duration: ANIMATION_DURATION,\n  fill: 'forwards',\n  easing: 'ease',\n};\nlet isStarted = false;\n\nfunction generatePlayingTilesContainer(isCreate) {\n  if (isCreate) {\n    const playingTiles = document.createElement('div');\n\n    playingTiles.classList.add('generated-field');\n\n    document.querySelector('.container').prepend(playingTiles);\n\n    return;\n  }\n\n  document.querySelector('.game-score').textContent = game.getScore();\n  document.querySelector('.generated-field').remove();\n}\n\nbuttonStart.addEventListener('click', () => {\n  if (buttonStart.classList.contains('start')) {\n    isStarted = true;\n    game.start();\n    generatePlayingTilesContainer(true);\n    updateField();\n    document.querySelector('.message-start').classList.add('hidden');\n    buttonStart.classList.remove('start');\n    buttonStart.classList.add('restart');\n    buttonStart.textContent = 'Restart';\n\n    return;\n  }\n\n  if (buttonStart.classList.contains('restart')) {\n    isStarted = false;\n    game.restart();\n    generatePlayingTilesContainer(false);\n    document.querySelector('.message-start').classList.remove('hidden');\n    buttonStart.classList.remove('restart');\n    buttonStart.classList.add('start');\n    buttonStart.textContent = 'Start';\n\n    if (!document.querySelector('.message-win').classList.contains('hidden')) {\n      document.querySelector('.message-win').classList.add('hidden');\n    }\n\n    if (!document.querySelector('.message-lose').classList.contains('hidden')) {\n      document.querySelector('.message-lose').classList.add('hidden');\n    }\n  }\n\n  buttonStart.blur();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (!isStarted) {\n    return;\n  }\n\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (e.key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (e.key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (e.key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  const moveResult = moveAnimation(e.key);\n\n  if (moveResult) {\n    setTimeout(() => {\n      updateField();\n    }, ANIMATION_DURATION);\n  } else {\n    updateField();\n  }\n\n  if (game.getStatus() === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n    isStarted = false;\n  }\n\n  if (game.getStatus() === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n    isStarted = false;\n  }\n});\n\nfunction updateField() {\n  if (document.querySelector('.generated-field') !== null) {\n    document.querySelector('.generated-field').innerHTML = '';\n  }\n\n  const newTop = document.createDocumentFragment();\n  const score = game.getScore();\n  const state = game.getState();\n\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (state[i][j] !== 0) {\n        const cellRect = tbody.rows[i].cells[j].getBoundingClientRect();\n\n        newTop.append(document.createElement('div'));\n\n        newTop.lastElementChild.classList.add(\n          'generated-cell',\n          `generated-cell--${state[i][j]}`,\n        );\n        newTop.lastElementChild.dataset.x = j;\n        newTop.lastElementChild.dataset.y = i;\n        newTop.lastElementChild.textContent = state[i][j];\n        newTop.lastElementChild.style.left = cellRect.left + 'px';\n        newTop.lastElementChild.style.top = cellRect.top + 'px';\n\n        newTop.lastElementChild.animate(\n          {\n            transform: ['scale(1)', 'scale(1.03)', 'scale(1)'],\n          },\n          ANIMATION_OPTIONS,\n        );\n      }\n    }\n  }\n\n  if (document.querySelector('.generated-field') !== null) {\n    document.querySelector('.generated-field').append(newTop);\n  }\n  document.querySelector('.game-score').textContent = score;\n}\n\nfunction moveAnimation(arrow) {\n  const generatedField = document.querySelector('.generated-field');\n  const movedCells = game.getMovedCells();\n  const isChanged = movedCells.some((movedCell) => {\n    return movedCell.changed;\n  });\n\n  if (!isChanged) {\n    return false;\n  }\n\n  for (const generatedCell of generatedField.children) {\n    if (generatedCell.getAnimations().length > 0) {\n      generatedCell.getAnimations()[0].cancel();\n    }\n  }\n\n  switch (arrow) {\n    case 'ArrowLeft':\n      for (const generatedCell of generatedField.children) {\n        const generatedCellRect = generatedCell.getBoundingClientRect();\n        let x = 0;\n\n        for (const movedCell of movedCells) {\n          if (\n            movedCell.changed &&\n            movedCell.x === Number(generatedCell.dataset.x) &&\n            movedCell.y === Number(generatedCell.dataset.y)\n          ) {\n            const cellRect =\n              tbody.rows[movedCell.y].cells[\n                movedCell.newX\n              ].getBoundingClientRect();\n\n            x = generatedCellRect.left - cellRect.left;\n          }\n        }\n\n        generatedCell.animate(\n          {\n            transform: ['translateX(0)', `translateX(${-x}px)`],\n          },\n          ANIMATION_OPTIONS,\n        );\n      }\n      break;\n\n    case 'ArrowRight':\n      for (const generatedCell of generatedField.children) {\n        const generatedCellRect = generatedCell.getBoundingClientRect();\n        let x = 0;\n\n        for (const movedCell of movedCells) {\n          if (\n            movedCell.changed &&\n            movedCell.x === Number(generatedCell.dataset.x) &&\n            movedCell.y === Number(generatedCell.dataset.y)\n          ) {\n            const cellRect =\n              tbody.rows[movedCell.y].cells[\n                movedCell.newX\n              ].getBoundingClientRect();\n\n            x = cellRect.left - generatedCellRect.left;\n          }\n        }\n\n        generatedCell.animate(\n          {\n            transform: ['translateX(0)', `translateX(${x}px)`],\n          },\n          ANIMATION_OPTIONS,\n        );\n      }\n      break;\n\n    case 'ArrowUp':\n      for (const generatedCell of generatedField.children) {\n        const generatedCellRect = generatedCell.getBoundingClientRect();\n        let y = 0;\n\n        for (const movedCell of movedCells) {\n          if (\n            movedCell.changed &&\n            movedCell.x === Number(generatedCell.dataset.x) &&\n            movedCell.y === Number(generatedCell.dataset.y)\n          ) {\n            const cellRect =\n              tbody.rows[movedCell.newY].cells[\n                movedCell.x\n              ].getBoundingClientRect();\n\n            y = generatedCellRect.top - cellRect.top;\n          }\n        }\n\n        generatedCell.animate(\n          {\n            transform: ['translateY(0)', `translateY(${-y}px)`],\n          },\n          ANIMATION_OPTIONS,\n        );\n      }\n      break;\n\n    case 'ArrowDown':\n      for (const generatedCell of generatedField.children) {\n        const generatedCellRect = generatedCell.getBoundingClientRect();\n        let y = 0;\n\n        for (const movedCell of movedCells) {\n          if (\n            movedCell.changed &&\n            movedCell.x === Number(generatedCell.dataset.x) &&\n            movedCell.y === Number(generatedCell.dataset.y)\n          ) {\n            const cellRect =\n              tbody.rows[movedCell.newY].cells[\n                movedCell.x\n              ].getBoundingClientRect();\n\n            y = cellRect.top - generatedCellRect.top;\n          }\n        }\n\n        generatedCell.animate(\n          {\n            transform: ['translateY(0)', `translateY(${y}px)`],\n          },\n          ANIMATION_OPTIONS,\n        );\n      }\n      break;\n  }\n\n  return true;\n}\n","'use strict';\n\nclass Game {\n  movedCells = [];\n  #NUMBER_OF_ROWS_CELLS = 4;\n  initialState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  constructor(initialState) {\n    this.initialState =\n      initialState || Array.from({ length: 4 }, () => Array(4).fill(0));\n    this.gameState = JSON.parse(JSON.stringify(this.initialState));\n    this.gameNewState = JSON.parse(JSON.stringify(this.gameState));\n    this.gameStatus = 'idle';\n    this.gameScore = 0;\n  }\n\n  moveLeft() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    this.resetMovedCells();\n    this.gameNewState = JSON.parse(JSON.stringify(this.gameState));\n\n    const mergeLeft = (i, j, k) => {\n      if (this.gameNewState[i][k] !== 0) {\n        for (const movedCell of this.movedCells) {\n          if (movedCell.y === i && movedCell.x === j) {\n            movedCell.newX = j;\n            movedCell.changed = true;\n          }\n\n          if (movedCell.y === i && movedCell.x === k) {\n            movedCell.newX = j;\n            movedCell.changed = true;\n          }\n        }\n        this.gameNewState[i][j] *= 2;\n        this.gameScore += this.gameNewState[i][j];\n        this.gameNewState[i][k] = 0;\n      }\n    };\n\n    for (let i = 0; i < this.#NUMBER_OF_ROWS_CELLS; i++) {\n      for (let j = 0; j < this.#NUMBER_OF_ROWS_CELLS - 1; j++) {\n        if (this.gameNewState[i][j] === this.gameNewState[i][j + 1]) {\n          mergeLeft(i, j, j + 1);\n        } else if (\n          j < this.#NUMBER_OF_ROWS_CELLS - 2 &&\n          this.gameNewState[i][j] === this.gameNewState[i][j + 2] &&\n          this.gameNewState[i][j + 1] === 0\n        ) {\n          mergeLeft(i, j, j + 2);\n        } else if (\n          j < this.#NUMBER_OF_ROWS_CELLS - 3 &&\n          this.gameNewState[i][j] === this.gameNewState[i][j + 3] &&\n          this.gameNewState[i][j + 1] === 0 &&\n          this.gameNewState[i][j + 2] === 0\n        ) {\n          mergeLeft(i, j, j + 3);\n        }\n      }\n    }\n\n    for (let num = 1; num <= this.#NUMBER_OF_ROWS_CELLS - 1; num++) {\n      for (let i = 0; i < this.#NUMBER_OF_ROWS_CELLS; i++) {\n        for (let j = 0; j < this.#NUMBER_OF_ROWS_CELLS - 1; j++) {\n          if (\n            this.gameNewState[i][j] === 0 &&\n            this.gameNewState[i][j + 1] !== 0\n          ) {\n            for (const movedCell of this.movedCells) {\n              if (\n                movedCell.changed &&\n                movedCell.y === i &&\n                movedCell.newX === j + 1\n              ) {\n                movedCell.newX = j;\n              }\n\n              if (\n                !movedCell.changed &&\n                movedCell.y === i &&\n                movedCell.x === j + 1\n              ) {\n                movedCell.newX = j;\n                movedCell.changed = true;\n              }\n            }\n            this.gameNewState[i][j] = this.gameNewState[i][j + 1];\n            this.gameNewState[i][j + 1] = 0;\n          }\n        }\n      }\n    }\n\n    this.checkChanges();\n    this.checkStatus();\n  }\n  moveRight() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    this.resetMovedCells();\n    this.gameNewState = JSON.parse(JSON.stringify(this.gameState));\n\n    const mergeRight = (i, j, k) => {\n      if (this.gameNewState[i][k] !== 0) {\n        for (const movedCell of this.movedCells) {\n          if (movedCell.y === i && movedCell.x === j) {\n            movedCell.newX = j;\n            movedCell.changed = true;\n          }\n\n          if (movedCell.y === i && movedCell.x === k) {\n            movedCell.newX = j;\n            movedCell.changed = true;\n          }\n        }\n        this.gameNewState[i][j] *= 2;\n        this.gameScore += this.gameNewState[i][j];\n        this.gameNewState[i][k] = 0;\n      }\n    };\n\n    for (let i = this.#NUMBER_OF_ROWS_CELLS - 1; i >= 0; i--) {\n      for (let j = this.#NUMBER_OF_ROWS_CELLS - 1; j > 0; j--) {\n        if (this.gameNewState[i][j] === this.gameNewState[i][j - 1]) {\n          mergeRight(i, j, j - 1);\n        } else if (\n          j > 1 &&\n          this.gameNewState[i][j] === this.gameNewState[i][j - 2] &&\n          this.gameNewState[i][j - 1] === 0\n        ) {\n          mergeRight(i, j, j - 2);\n        } else if (\n          j > 2 &&\n          this.gameNewState[i][j] === this.gameNewState[i][j - 3] &&\n          this.gameNewState[i][j - 1] === 0 &&\n          this.gameNewState[i][j - 2] === 0\n        ) {\n          mergeRight(i, j, j - 3);\n        }\n      }\n    }\n\n    for (let num = 1; num <= this.#NUMBER_OF_ROWS_CELLS - 1; num++) {\n      for (let i = this.#NUMBER_OF_ROWS_CELLS - 1; i >= 0; i--) {\n        for (let j = this.#NUMBER_OF_ROWS_CELLS - 1; j > 0; j--) {\n          if (\n            this.gameNewState[i][j] === 0 &&\n            this.gameNewState[i][j - 1] !== 0\n          ) {\n            for (const movedCell of this.movedCells) {\n              if (\n                movedCell.changed &&\n                movedCell.y === i &&\n                movedCell.newX === j - 1\n              ) {\n                movedCell.newX = j;\n              }\n\n              if (\n                !movedCell.changed &&\n                movedCell.y === i &&\n                movedCell.x === j - 1\n              ) {\n                movedCell.newX = j;\n                movedCell.changed = true;\n              }\n            }\n            this.gameNewState[i][j] = this.gameNewState[i][j - 1];\n            this.gameNewState[i][j - 1] = 0;\n          }\n        }\n      }\n    }\n\n    this.checkChanges();\n    this.checkStatus();\n  }\n  moveUp() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    this.resetMovedCells();\n    this.gameNewState = JSON.parse(JSON.stringify(this.gameState));\n\n    const mergeUp = (i, j, k) => {\n      if (this.gameNewState[k][j] !== 0) {\n        for (const movedCell of this.movedCells) {\n          if (movedCell.x === j && movedCell.y === i) {\n            movedCell.newY = i;\n            movedCell.changed = true;\n          }\n\n          if (movedCell.x === j && movedCell.y === k) {\n            movedCell.newY = i;\n            movedCell.changed = true;\n          }\n        }\n        this.gameNewState[i][j] *= 2;\n        this.gameScore += this.gameNewState[i][j];\n        this.gameNewState[k][j] = 0;\n      }\n    };\n\n    for (let j = 0; j < this.#NUMBER_OF_ROWS_CELLS; j++) {\n      for (let i = 0; i < this.#NUMBER_OF_ROWS_CELLS - 1; i++) {\n        if (this.gameNewState[i][j] === this.gameNewState[i + 1][j]) {\n          mergeUp(i, j, i + 1);\n        } else if (\n          i < this.#NUMBER_OF_ROWS_CELLS - 2 &&\n          this.gameNewState[i][j] === this.gameNewState[i + 2][j] &&\n          this.gameNewState[i + 1][j] === 0\n        ) {\n          mergeUp(i, j, i + 2);\n        } else if (\n          i < this.#NUMBER_OF_ROWS_CELLS - 3 &&\n          this.gameNewState[i][j] === this.gameNewState[i + 3][j] &&\n          this.gameNewState[i + 1][j] === 0 &&\n          this.gameNewState[i + 2][j] === 0\n        ) {\n          mergeUp(i, j, i + 3);\n        }\n      }\n    }\n\n    for (let num = 1; num <= this.#NUMBER_OF_ROWS_CELLS - 1; num++) {\n      for (let j = 0; j < this.#NUMBER_OF_ROWS_CELLS; j++) {\n        for (let i = 0; i < this.#NUMBER_OF_ROWS_CELLS - 1; i++) {\n          if (\n            this.gameNewState[i][j] === 0 &&\n            this.gameNewState[i + 1][j] !== 0\n          ) {\n            for (const movedCell of this.movedCells) {\n              if (\n                movedCell.changed &&\n                movedCell.newY === i + 1 &&\n                movedCell.x === j\n              ) {\n                movedCell.newY = i;\n              }\n\n              if (\n                !movedCell.changed &&\n                movedCell.y === i + 1 &&\n                movedCell.x === j\n              ) {\n                movedCell.newY = i;\n                movedCell.changed = true;\n              }\n            }\n            this.gameNewState[i][j] = this.gameNewState[i + 1][j];\n            this.gameNewState[i + 1][j] = 0;\n          }\n        }\n      }\n    }\n\n    this.checkChanges();\n    this.checkStatus();\n  }\n  moveDown() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    this.resetMovedCells();\n    this.gameNewState = JSON.parse(JSON.stringify(this.gameState));\n\n    const mergeDown = (i, j, k) => {\n      if (this.gameNewState[k][j] !== 0) {\n        for (const movedCell of this.movedCells) {\n          if (movedCell.x === j && movedCell.y === i) {\n            movedCell.newY = i;\n            movedCell.changed = true;\n          }\n\n          if (movedCell.x === j && movedCell.y === k) {\n            movedCell.newY = i;\n            movedCell.changed = true;\n          }\n        }\n        this.gameNewState[i][j] *= 2;\n        this.gameScore += this.gameNewState[i][j];\n        this.gameNewState[k][j] = 0;\n      }\n    };\n\n    for (let j = this.#NUMBER_OF_ROWS_CELLS - 1; j >= 0; j--) {\n      for (let i = this.#NUMBER_OF_ROWS_CELLS - 1; i > 0; i--) {\n        if (this.gameNewState[i][j] === this.gameNewState[i - 1][j]) {\n          mergeDown(i, j, i - 1);\n        } else if (\n          i > 1 &&\n          this.gameNewState[i][j] === this.gameNewState[i - 2][j] &&\n          this.gameNewState[i - 1][j] === 0\n        ) {\n          mergeDown(i, j, i - 2);\n        } else if (\n          i > 2 &&\n          this.gameNewState[i][j] === this.gameNewState[i - 3][j] &&\n          this.gameNewState[i - 1][j] === 0 &&\n          this.gameNewState[i - 2][j] === 0\n        ) {\n          mergeDown(i, j, i - 3);\n        }\n      }\n    }\n\n    for (let num = 1; num <= this.#NUMBER_OF_ROWS_CELLS - 1; num++) {\n      for (let j = this.#NUMBER_OF_ROWS_CELLS - 1; j >= 0; j--) {\n        for (let i = this.#NUMBER_OF_ROWS_CELLS - 1; i > 0; i--) {\n          if (\n            this.gameNewState[i][j] === 0 &&\n            this.gameNewState[i - 1][j] !== 0\n          ) {\n            for (const movedCell of this.movedCells) {\n              if (\n                movedCell.changed &&\n                movedCell.newY === i - 1 &&\n                movedCell.x === j\n              ) {\n                movedCell.newY = i;\n              }\n\n              if (\n                !movedCell.changed &&\n                movedCell.y === i - 1 &&\n                movedCell.x === j\n              ) {\n                movedCell.newY = i;\n                movedCell.changed = true;\n              }\n            }\n            this.gameNewState[i][j] = this.gameNewState[i - 1][j];\n            this.gameNewState[i - 1][j] = 0;\n          }\n        }\n      }\n    }\n\n    this.checkChanges();\n    this.checkStatus();\n  }\n\n  checkChanges() {\n    const isChanged = this.movedCells.some((movedCell) => {\n      return movedCell.changed;\n    });\n\n    if (!isChanged) {\n      return;\n    }\n\n    this.gameState = JSON.parse(JSON.stringify(this.gameNewState));\n    this.gameNewState = JSON.parse(JSON.stringify(this.gameState));\n    this.spawnNumber();\n  }\n\n  getScore() {\n    return this.gameScore;\n  }\n\n  getState() {\n    return this.gameState;\n  }\n\n  resetMovedCells() {\n    this.movedCells = [];\n\n    for (let i = 0; i < this.#NUMBER_OF_ROWS_CELLS; i++) {\n      for (let j = 0; j < this.#NUMBER_OF_ROWS_CELLS; j++) {\n        if (this.gameState[i][j] !== 0) {\n          this.movedCells.push({ x: j, y: i, changed: false });\n        }\n      }\n    }\n  }\n\n  getMovedCells() {\n    return this.movedCells;\n  }\n\n  getStatus() {\n    return this.gameStatus;\n  }\n\n  start() {\n    if (this.gameStatus === 'idle') {\n      this.gameStatus = 'playing';\n      this.gameScore = 0;\n      this.spawnNumber();\n      this.spawnNumber();\n    }\n  }\n\n  restart() {\n    this.gameState = JSON.parse(JSON.stringify(this.initialState));\n    this.gameStatus = 'idle';\n    this.gameScore = 0;\n  }\n\n  spawnNumber() {\n    const freeCell = [];\n\n    for (let i = 0; i < this.#NUMBER_OF_ROWS_CELLS; i++) {\n      for (let j = 0; j < this.#NUMBER_OF_ROWS_CELLS; j++) {\n        if (this.gameState[i][j] === 0) {\n          freeCell.push({ x: i, y: j });\n        }\n      }\n    }\n\n    if (freeCell.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * freeCell.length);\n    const PROBABILITY_FOR_FOUR = 10;\n    const randomNumber =\n      Math.random() * 100 + 1 <= PROBABILITY_FOR_FOUR ? 4 : 2;\n\n    this.gameState[freeCell[randomIndex].x][freeCell[randomIndex].y] =\n      randomNumber;\n  }\n\n  checkStatus() {\n    if (this.gameState.some((row) => row.includes(2048))) {\n      this.gameStatus = 'win';\n    } else if (!this.canMove()) {\n      this.gameStatus = 'lose';\n    }\n  }\n\n  canMove() {\n    if (this.gameState.some((row) => row.includes(0))) {\n      return true;\n    }\n\n    for (let i = 0; i < this.#NUMBER_OF_ROWS_CELLS - 1; i++) {\n      for (let j = 0; j < this.#NUMBER_OF_ROWS_CELLS; j++) {\n        if (this.gameState[i][j] === this.gameState[i + 1][j]) {\n          return true;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.#NUMBER_OF_ROWS_CELLS; i++) {\n      for (let j = 0; j < this.#NUMBER_OF_ROWS_CELLS - 1; j++) {\n        if (this.gameState[i][j] === this.gameState[i][j + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","movedCells","initialState","constructor","Array","from","length","fill","gameState","JSON","parse","stringify","gameNewState","gameStatus","gameScore","moveLeft","resetMovedCells","mergeLeft","i","j","k","movedCell","y","x","newX","changed","num","checkChanges","checkStatus","moveRight","mergeRight","moveUp","mergeUp","newY","moveDown","mergeDown","some","spawnNumber","getScore","getState","push","getMovedCells","getStatus","start","restart","freeCell","randomIndex","Math","floor","random","randomNumber","row","includes","canMove","$09e991522ca7e64e$var$tbody","document","querySelector","$09e991522ca7e64e$var$buttonStart","$09e991522ca7e64e$var$ANIMATION_OPTIONS","duration","easing","$09e991522ca7e64e$var$isStarted","$09e991522ca7e64e$var$generatePlayingTilesContainer","isCreate","playingTiles","createElement","classList","add","prepend","textContent","remove","$09e991522ca7e64e$var$updateField","innerHTML","newTop","createDocumentFragment","score","state","cellRect","rows","cells","getBoundingClientRect","append","lastElementChild","dataset","style","left","top","animate","transform","addEventListener","contains","blur","e","key","$09e991522ca7e64e$var$moveAnimation","arrow","generatedField","generatedCell","children","getAnimations","cancel","generatedCellRect","Number","setTimeout"],"version":3,"file":"index.cbddf41c.js.map"}